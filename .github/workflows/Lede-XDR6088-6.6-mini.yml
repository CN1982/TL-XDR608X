#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

# GitHub Actions工作流配置文件（精简版）
# 功能：自动编译OpenWrt精简版固件（针对XDR6088设备，6.6内核）

name: Lede-XDR6088-6.6-mini  # 工作流名称（含mini标识）

# 触发条件
on:
  # 依赖Auto-Clean工作流完成（自动触发）
  workflow_run:
    workflows: ["Auto-Clean"]
    types:
      - completed
  # 手动触发（通过GitHub网页）
  workflow_dispatch:

# 环境变量配置
env:
  REPO_URL: https://github.com/coolsnowwolf/lede           # OpenWrt源码仓库地址
  REPO_BRANCH: master                                      # 使用master分支
  FEEDS_CONF: feeds.conf.default                           # 自定义精简版feeds配置
  CONFIG_FILE: config/xdr6088-mini.config                  # 精简版设备配置文件
  DIY_P1_SH: diy/diy-part1-mini.sh                         # 精简版构建前脚本
  DIY_P2_SH: diy/diy-part2-mini.sh                         # 精简版构建后脚本
  UPLOAD_BIN_DIR: false                                    # 是否上传二进制目录
  UPLOAD_FIRMWARE: true                                    # 是否上传固件
  UPLOAD_RELEASE: true                                     # 是否创建发布
  TZ: Asia/Shanghai                                        # 设置时区为上海

# 构建任务定义
jobs:
  build:
    runs-on: ubuntu-22.04  # 使用Ubuntu 22.04作为构建环境

    # 构建步骤序列
    steps:
    - name: Checkout  # 步骤1：检出代码仓库
      uses: actions/checkout@main  # 使用官方检出动作

    - name: Initialization environment  # 步骤2：初始化构建环境
      env:
        DEBIAN_FRONTEND: noninteractive  # 非交互模式安装
      run: |
        # 清理系统并安装编译依赖（同标准版）
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install <大量编译依赖项...>
        sudo -E apt-get -qq autoremove --purge  # 清理无用依赖
        sudo -E apt-get -qq clean               # 清理缓存
        sudo timedatectl set-timezone "$TZ"     # 设置时区
        sudo mkdir -p /workdir                  # 创建工作目录
        sudo chown $USER:$GROUPS /workdir       # 设置目录权限

    - name: Clone source code  # 步骤3：克隆OpenWrt源码
      working-directory: /workdir
      run: |
        df -hT $PWD               # 显示磁盘使用情况
        git clone $REPO_URL -b $REPO_BRANCH openwrt  # 克隆仓库
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt  # 创建符号链接

    - name: Load custom feeds  # 步骤4：加载精简版软件源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default  # 替换默认feeds配置
        chmod +x $DIY_P1_SH                                              # 添加执行权限
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH  # 执行精简版预处理脚本

    - name: Update & Install feeds  # 步骤5：更新并安装软件源
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a  # 更新所有feeds
        ./scripts/feeds install -a # 安装所有feeds
        
        # 强制设置内核版本为6.6（同标准版）
        sed -i "s/KERNEL_PATCHVER:=.*.*/KERNEL_PATCHVER:=6.6/g" target/linux/mediatek/Makefile
        sed -i "s/KERNEL_PATCHVER=.*.*/KERNEL_PATCHVER=6.6/g" target/linux/mediatek/Makefile
        
        # 修改固件描述信息（包含编译日期）
        sed -i "s/DISTRIB_DESCRIPTION='*.*'/DISTRIB_DESCRIPTION='TL-XDR6088-$(date +%Y%m%d)'/g" package/lean/default-settings/files/zzz-default-settings

    - name: Load custom configuration  # 步骤6：加载精简版配置
      run: |
        [ -e files ] && mv files openwrt/files  # 移动配置文件目录
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config  # 应用精简版配置
        chmod +x $DIY_P2_SH                                     # 添加执行权限
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH  # 执行精简版后处理脚本

    - name: Download package  # 步骤7：下载编译依赖包（同标准版）
      id: package
      run: |
        cd openwrt
        make defconfig          # 生成默认配置
        make download -j8       # 多线程下载依赖（8线程）
        # 清理小于1KB的无效文件
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware  # 步骤8：编译固件（同标准版）
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"  # 输出CPU核心数
        # 三阶段编译（先全速，失败则单线程重试，再详细输出调试）
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT  # 设置输出状态
        # 提取设备名称并设置环境变量
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV  # 设置文件日期标记

    - name: Check space usage  # 步骤9：检查磁盘空间（同标准版）
      if: (!cancelled())  # 仅当任务未取消时执行
      run: df -hT

    - name: Assemble Artifact  # 步骤10：组装构建产物
      id: assemble_artifact
      run: |
        rm -rf ./ARM_Out                          # 清理旧产物目录
        mkdir -p ./ARM_Out/                       # 创建新产物目录
        cp -a ./openwrt/.config ./ARM_Out/xdr6088.config  # 复制配置文件
        
        # 定义MD5校验和生成函数（同标准版）
        getmd5() {
          md5sum=`md5sum $1`
          md5=`echo ${md5sum% *}`
          md5=`echo ${md5:0:10}`
        }
        
        # 生成带日期和MD5的固件文件名（含mini标识）
        rom=openwrt/bin/targets/mediatek/filogic/openwrt-mediatek-filogic-tplink_tl-xdr6088-squashfs-sysupgrade.bin
        getmd5 $rom        
        cp -a $rom ./ARM_Out/LEDE-TP-Link_TL-XDR6088-6.6-$(date +"%Y.%m.%d-%H%M").bin

    - name: Upload Firmwares  # 步骤11：上传固件文件（同标准版）
      uses: actions/upload-artifact@main
      with:
        name: xdr6088-OpenWrt_66
        path: ARM_Out/*.bin  # 上传所有.bin文件

    - name: Upload config  # 步骤12：上传配置文件（同标准版）
      uses: actions/upload-artifact@main
      with:
        name: xdr6088-config
        path: ARM_Out/xdr6088.config

    - name: Upload Packages  # 步骤13：上传软件包（同标准版）
      uses: actions/upload-artifact@main
      with:
        name: xdr6088-Packages
        path: openwrt/bin/packages

    - name: Generate Tag & Release Name  # 步骤14：生成发布标签和名称
      id: generate_name
      run: |
        time=$(date +%Y%m%d%H%M%S)
        release_tag="$time"
        release_name="LEDE-TL-XDR6088-6.6内核-mini-$(date +%Y%m%d)"  # 名称含mini标识
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

    - name: Create Release & Upload  # 步骤15：创建GitHub发布并上传固件（同标准版）
      uses: ncipollo/release-action@v1.14.0
      with:
        artifacts: ARM_Out/*.bin    # 要发布的文件
        name: ${{ steps.generate_name.outputs.release_name }}  # 发布名称
        tag: ${{ steps.generate_name.outputs.release_tag }}    # 发布标签
        token: ${{ secrets.GITHUB_TOKEN }}  # 使用仓库的访问令牌
